RFC                         Chadow                    version 1.0.0
                                                    Valentin Sebbah
                                                     Antoine Bastos

DESCRIPTION

  Le protocole Chadow est un protocole d'échange de message et 
  de fichiers. Il permet la mise en place d'un reseau de partage 
  de fichier en pair é pair, qui n'est pas complétement 
  décentralisé. Il se veut par essence, en ce qui concerne le 
  partage de fichier, étre une implémentation expérimentative à
  caractère didactique du protocole p2p BitTorrent. 
  La particularité de chadow réside dans le fait que chaque client 
  peut servir de proxy pour d'autres clients.

SOMMAIRE

  Conventions.....................................................
  Encodage........................................................
  Identification..................................................
  Discussion......................................................
    Découverte des clients........................................
    Publication de message globaux................................
    Echange de message entre client...............................
  Annonce.........................................................
    Annonce initiale..............................................
    Annonce de mise à jour........................................
  Recherche de fichiers...........................................
  Téléchargement d'un fichier.....................................
    Mode de Téléchargement........................................
      Mode ouvert.................................................
      Mode fermé..................................................
























                                                                  [page 1]

Conventions

  Il existe des noeuds:
    - serveur, représenté par une lettre majuscule entre crochet, ex: [A]
    - client, représenté par une lettre majuscule, ex: B

                        B ------ [A] ----- C
                                  |
                                  |
                                  D
 

Encodage
  le serveur doit garantir qu'il n'existe deux client avec le même pseudo.

                        +---------------+
                        | 0 | error     |
                        +---------------+
                        | 1 | register  |
                        +---------------+
                        | 2 | discovery |
                        +---------------+
                        | 3 | event     |
                        +---------------+
                        | 4 | yell      |
                        +---------------+
                        | 5 | whisper   |
                        +---------------+


  - un int représente 4 octets
  - un long représente 8 octets
  - une string est toujours précédée par sa taille en int (4 octets) 
                  +--------------------------------+
                  | size (int) | mystring (string) | 
                  +--------------------------------+

  - 'creation_date' est une date au format UNIX (long), nombre de secondes depuis 
    le 1er janvier 1970 à 00:00:00 UTC


  'username' se réfère à une chaine de charactère (string):
    - D'une taille comprise entre 2 et 32 charactères
    - Encodée en UTF-16 (Unicode)
    - Ne contenant pas d'espaces ou de charactères invisibles
    - Ne contenant pas les sous-chaînes suivantes : @, #, :, /, ```, chadow

Identification

  Le client doit connaître l'adresse du serveur avec lequel il souhaite communiquer.
  Lorsqu'un client souhaite se connecter au serveur IRC, il envoie une demande de connexion en spécifiant le nom d'utilisateur qu'il souhaite utiliser.
  Voici le format de la trame pour cette demande : 

                    +-----------------------+
                    | (register) | username | 
                    +-----------------------+
                    
  Le serveur répond au client pour indiquer si le nom d'utilisateur est disponible ou non :
    - Si le nom d'utilisateur est disponible, le serveur envoie une validation au client :
      
                    +-----------------------+
                    | (register) | username | 
                    +-----------------------+
      
    - Si le nom d'utilisateur est déjà utilisé, le serveur envoie un message d'erreur au client :
      
                    +-----------------------------------+
                    | (error) | username already in use | 
                    +-----------------------------------+
      
      Dans ce cas ci le client peut envoyer à nouveau une demande de connexion au serveur.
      
  La partie chat Discord:
    GPG
    
Discussion

  Découverte des clients 
    Le client envoie au serveur la trame suivante:

    +-------------+
    | (discovery) |
    +-------------+
                
  Le serveur répond avec la liste des pseudo présents:

    +-------------------------+
    | (discovery) | usernames |
    +-------------------------+

    usernames: liste des usernames des clients connectés. 
                Concaténation des paires (taille de l'username en int)(username).
                La liste se termine par 0.
                Ex: 
                8morpheus7trinity0
                

  Mise à jour des présence

    Le serveur notifie les évènements ('code') d'arrivé (1) et de départ (0) à tous les clients.
    Permet d'éviter de demander la liste entière des utilisateurs intervalle régulier.
    Les arrivés et départs sont traité comme des messages.

    +------------------------------+
    | (event) | code |  username   |
    +------------------------------+

    username: le username associé avec l'évènement


  Publication de messages globaux

    Le client envoie une trame de publication de message global.
    Le serveur retransmet la même trame à tous les clients même le client d'origine.

    +--------------------------------------------------------+
    | (yell) | creation_date | message (string)   |
    +--------------------------------------------------------+

    


                                                                  [page 2]


  Echange de messages entre client

    Le client envoie au serveur une trame pour un message privé destiné à un
    username spécifique. Le serveur la retransmet au client associé.

    +--------------------------------------------------------------------+
    | (whisper) | username_receiver | creation_date | message |
    +--------------------------------------------------------------------+

    Si le serveur ne connaît pas l'username (n'est plus connecté ou n'existe pas)
    le serveur réponds une trame d'erreur.

    +----------------+
    | (error) |  0   |
    +----------------+

    0 : unknown user
 

Annonce
  Annonce initiale

  Le client annonce au serveur qu'il propose un fichier.

                              _____ __ __ __ _ _ _ _ 
                             | info         
  +------------------------------------------------------------------------+
  | 5 | info_hash | creation_date | name | size | fragment_size |
  +------------------------------------------------------------------------+
  fragments |
  +---------+

  info_hash: SHA1 de la partie 'info' de la trame

  creation_date: date de création du partage
  name: nom du fichier (string)
  size: taille du fichier en long
  fragment_size: taille fixe en int, d'une puissance 2, avec laquelle le 
                 fichier est découpé en fragments.
  fragments: concaténation des SHA1 (20 octets) des fragments 



  Recherche de fichiers

    genre: 
      +-----------------------------------------------------------------------+
      | (search) | search_input  | options | expected_results | creation_date |
      +-----------------------------------------------------------------------+
        
      search_input: (string) la chaine de charactère pour rechercher le nom d'un fichier
      options: champs de bits (int)
        Numéro du bit en partant du poids faible.
        1: sensible à la case
        
        2: à la date (date incluse)
        3: avant la date (date exclue)
        4: après la date (date exclue)
      expected_results: (int) nombre de résultats attendus, 0 pour "tous"

    Le serveur réponds avec 

      +----------------------------------------+
      | (search) | number_of_results | results |
      +----------------------------------------+

      number_of_results: (int)
      results: liste 
        filename (string)
        info_hash (20 byte)
        creation_date (long) 
        seeders (int)
        leechers (int)


















                                                                  [page 3]