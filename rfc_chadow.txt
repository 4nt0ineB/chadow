RFC                         Chadow                         version 1.0.0
                                                               Mars 2024
                                                         Valentin Sebbah
                                                          Antoine Bastos

DESCRIPTION

  Le protocole Chadow est un protocole d'échange de message et de 
  fichiers. Il permet la mise en place d'un reseau de partage 
  décentralisé de fichiers entre clients. Il embarque un moyen 
  d'éventuellement anonymiser le téléchargement en passant par d'autres
  clients qui servent de proxy.

SOMMAIRE

  1. Conventions
  2. Encodage
  3. Identification 
  4. Discussion
    4.1 Découverte des utilisateurs
    4.2 Mise à jour des présences
    4.3 Publication de messages globaux
    4.4 Echange de message entre utilisateurs
  5. Codex  
    5.1 Publication du codex
    5.2 Téléchargement du codex
  6. Recherche de partage
  7. Annonce
    7.1 Annonce de proxy              
    7.2 Annonce de téléchargement
  8. Téléchargement des fichiers du codex
    8.1 Mode de Téléchargement
      8.1.1 Mode ouvert
      8.1.2 Mode fermé
      8.1.3 Demande de chunk
      8.1.4 Annulation
      8.1.5 Envoie du chunk
    8.2 Mode fermé
      8.1.1 Connexion en chaîne 
      8.2.2 Réparation de la chaîne
      8.2.3 Déconnexion en chaîne
  9. Déconnexion


1. Conventions

  Il existe des noeuds:
    - serveur, représenté par une lettre majuscule entre crochet, ex:[A]
    - client, représenté par une lettre majuscule, ex: B

                        B ------ [A] ----- C
                                  |
                                  |
                                  D
  
  Chadow utilise le protocole TCP (Transmission Control Protocol) comme 
  fondation pour assurer la fiabilité et l'intégrité des communications 
  entre les clients et le serveur. 

  Codex : Une suite de données décrivant les fichiers partagés par un ou 
    plusieurs utilisateurs dans un réseau pair à pair. Chaque codex est 
    identifié par un identifiant unique (ID) et comprend des 
    informations telles que la liste des fichiers partagés, les parties 
    de ces fichiers disponibles chez chaque utilisateur (sharer), et 
    d'autres métadonnées pertinentes.

  Annuaire : Un serveur centralisé qui stocke une liste de codex 
    disponibles dans le réseau. L'annuaire permet à tout client de 
    récupérer les informations nécessaires sur les codex afin de 
    participer au partage de fichiers. En consultant l'annuaire, un 
    client peut découvrir quels fichiers sont disponibles pour le 
    téléchargement, ainsi que les utilisateurs (sharers) qui possèdent 
    des parties de ces fichiers.

  Client : Une application utilisée pour télécharger et partager des 
    fichiers dans un réseau pair à pair. Les clients interagissent avec 
    l'annuaire pour obtenir des informations sur les fichiers 
    disponibles et établissent des connexions avec d'autres utilisateurs 
    (sharers) pour échanger des parties de fichiers.

  Sharer : Dans le contexte d'un réseau de partage de fichiers pair à
   pair, les sharers sont les utilisateurs qui possèdent et partagent 
   des parties de fichiers avec d'autres utilisateurs. Chaque sharer 
   contribue au réseau en mettant à disposition des parties de fichiers
   qu'il possède, permettant ainsi aux autres utilisateurs de 
   télécharger ces fichiers à partir de plusieurs sources.


2. Encodage

  Opcode des trames :

    +-----------------------+-----------------------+
    | 0  | error            | 1  | register         |
    +-----------------------+-----------------------+
    | 2  | ok               | 3  | discovery        |
    +-----------------------+-----------------------+
    | 4  | discovery_response                       |
    +-----------------------+-----------------------+
    | 5  | event            | 6  | yell             |
    +-----------------------+-----------------------+
    | 7  | whisper          | 8  | propose          |
    +-----------------------+-----------------------+
    | 9  | request          | 10 | request_response |
    +-----------------------+-----------------------+
    | 11 | search           | 12 | search_response  |
    +-----------------------+-----------------------+
    | 13 | request_download                         |
    +-----------------------+-----------------------+
    | 14 | request_open_download_response           |
    +-----------------------+-----------------------+
    | 15 | request_closed_download_response         |
    +-----------------------+-----------------------+
    | 16 | update           | 17 | handshake        |
    +-----------------------+-----------------------+
    | 18 | denied           | 19 | needchunk        |
    +-----------------------+-----------------------+
    | 20 | cancel           | 21 | herechunk        |
    +-----------------------+-----------------------+
    | 22 | proxy            | 23 | proxyopen        |
    +-----------------------+-----------------------+
    | 24 | proxy_ok         | 25 | hidden           |
    +-----------------------+-----------------------+

  - un int représente 4 octets
  - un long représente 8 octets
  - une string est toujours précédée par sa taille en int (4 octets) 
    et encodé en UTF-8

                  +--------------------------------+
                  | size (int) | mystring (string) | 
                  +--------------------------------+

  - 'creation_date' est une date au format UNIX (long), 
  nombre de secondes depuis le 1er janvier 1970 à 00:00:00 UTC

  - 'username' et 'username_receiver' se réfèrent à une chaine de 
    charactères (string):
    - D'une taille comprise entre 2 et 32 charactères
    - Encodée en UTF-8
    - Ne contenant pas d'espaces ou de charactères invisibles
    - Ne contenant pas les sous-chaînes suivantes : @, #, :, /, 
    ```, chadow
    Le serveur doit garantir qu'il n'existe pas deux clients avec le 
    même username.

  - 'IP' représente une adresse IP. Elle est encodée comme suit :
    - Un octet indiquant 4 pour une adresse IPv4 ou 6 pour une adresse 
    IPv6.
    - Suivi de l'adresse IP en binaire, composée de 4 octets pour IPv4 
    ou 16 octets pour IPv6.

- 'socket' représente une adresse IP et un numéro de port. Il est 
encodé de la manière suivante :
  - Une 'IP' selon la méthode décrite précédemment.
  - Un numéro de port, représenté sous forme d'entier (int).


3. Identification

  Le client doit connaître l'adresse du serveur avec lequel il 
  souhaite communiquer.  
  Lorsqu'un client souhaite se connecter au serveur IRC, il envoie une 
  demande de connexion en spécifiant le nom d'utilisateur qu'il souhaite 
  utiliser pour la session ainsi que son socket d'écoute. 
  Voici le format de la trame pour cette demande : 

      +--------------------------------+
      | (register) | username | socket |
      +--------------------------------+

  Le serveur répond au client pour indiquer si le nom d'utilisateur est 
  disponible ou non :
    - Si le nom d'utilisateur est disponible, le serveur envoie une 
    validation au client :

        +------+
        | (ok) | 
        +------+

    - Si le nom d'utilisateur est déjà utilisé ou que le nom 
    d'utilisateur ne respecte pas les règles de formatage définies
    dans la section "Encodage", le serveur envoie un message d'erreur
    au client :

        +----------------------------------+
        | (error) | error_message (string) |
        +----------------------------------+

        error_message: message human-readable

      Dans ce cas ci le client peut envoyer à nouveau une demande de 
      connexion au serveur.
      

4. Discussion

4.1 Découverte des utilisateurs 
  Le client envoie au serveur la trame suivante:

  +-------------+
  | (discovery) |
  +-------------+
              
  Le serveur répond avec la liste des noms d'utilisateurs présents:

  +----------------------------------+
  | (discovery_response) | usernames |
  +----------------------------------+

  usernames: 
    liste des usernames des clients connectés. Concaténation des 
    utilisateurs <nombre d'octets codant l'username (int)><username>.
    La liste se termine par 0.
    Ex: 64morpheus56trinity0

4.2 Mise à jour des présences

  Le serveur notifie les évènements ('code') d'arrivé (1) et de départ 
  (0) à tous les clients. Permet d'éviter de demander la liste entière 
  des utilisateurs systématiquement.
  Finalement les arrivés et départs sont traités comme des messages 
  globaux.

  +-------------------------------------+
  | (event) | code (byte) |  username   |
  +-------------------------------------+

  username: le username associé avec l'évènement

4.3 Publication de messages globaux

  Le client envoie une trame de publication de message global.

    +-------------------------------------------------------------+
    | (yell) | username_sender | message (string) | creation_date |
    +-------------------------------------------------------------+

  Le serveur retransmet la même trame à tous les clients même le 
  client d'origine, avec la date de réception du message
  et l'username de l'envoyeur.

4.4 Echange de messages entre utilisateurs

  Le client envoie au serveur une trame pour un message privé destiné 
  à un username spécifique. 

  +------------------------------------------------------------------+
  | (whisper) | username_receiver | message (string) | creation_date |
  +------------------------------------------------------------------+

  - message: le message à envoyer qui ne pourra pas dépasser 1024 octets.  

  Le serveur retransmet le message au client destinataire 
  ("username_receiver") :

  +----------------------------------------------------------------+
  | (whisper) | username_sender | message (string) | creation_date |
  +----------------------------------------------------------------+


  Si le serveur ne connaît pas l'username (n'est plus connecté ou 
  n'existe pas), le serveur réponds une trame d'erreur.

  +-----------------------------------+
  | (error) | error_message (string)  |
  +-----------------------------------+

  error_message: message human-readable ne dépassant pas les 1024 octets.


5. Codex
  L'annuaire possède des descriptions de chaque partage qu'on appelle 
  codex.
  L'annuaire sait quels clients partage un codex. 
  Les clients peuvent chercher des codex dans l'annuaire.
  Les clients peuvent demander à l'annuaire de rejoindre le réseau de 
  partage des fichiers du codex.

5.1 Publication du codex
  
  L'intérêt est que le l'annuaire ne possède pas de copie des fichiers 
  en partage, ce qui reviendrait à du téléchargement centralisé et 
  nécessite un serveur très puissant.
  L'annuaire possède seulement une description des fichiers que les
  sharers partagent.

  Le client peut proposer un ou des fichiers au partage qui sont 
  rassemblés dans un même ensemble décrit pas le codex. 
  
  +------------------------------+
  | (propose) | codex_id | codex |
  +------------------------------+

  codex_id : Le hachage (SHA1) unique du codex.
  codex : Une structure comprenant les informations suivantes :
    - name : Le nom du codex (string).
    - files_count : Le nombre de fichiers (int).

    files:
      Une liste concaténant les informations de chaque fichier partagé 
      dans le codex :
        - sha1 : Le hachage SHA1 du fichier, utilisé pour garantir
                 l'intégrité des données lors du téléchargement.
        - nomfichier : Le nom du fichier (string).
        - length : La taille du fichier en octets.
        - path : Le chemin absolu où le fichier est situé dans le 
                 codex (string).

  Exemple de trame pour le client qui propose un codex "MonCodex"
  contenant 2 fichiers :

  +----------------------------------------------------------------+
  | (propose) | 3a2b1c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0 | MonCodex | 
  +----------------------------------------------------------------+
  | 2 | 9a2b0c4d5e6f768b9c0d1e2f3a4b5c6d7e8f9a0 | image.jpg        | 
  +----------------------------------------------------------------+
  | 1000 | /home/user/Downloads/image.jpg                          | 
  +----------------------------------------------------------------+
  | 13eb0c4d5e6f768b9c0d1e2f3a4b5c6d7e8f9a0 | video.mp4            |
  +----------------------------------------------------------------+
  | 2000 | /home/user/Downloads/video.mp4                          |
  +----------------------------------------------------------------+

5.2 Téléchargement du codex

  Le client peut télécharger le codex avec la trame: 

  +-----------------------------+
  | (request) | codex_id (SHA1) |
  +-----------------------------+

  Le serveur répond avec la trame suivante :

  +----------------------------+
  | (request_response) | codex |
  +----------------------------+

  où codex contient les mêmes informations que décrites dans la partie 
  5.1.


6. Recherche de codex

  Le client envoie une trame de recherche au serveur avec les 
  informations suivantes :

  +---------------------------------------------------------------------+
  | (search) | codex_name | options | creation_date  | results | offset |
  +---------------------------------------------------------------------+
    
  codex_name : (string) le nom du codex à rechercher.
  options : un champ de bits (int) où chaque bit est numéroté à partir 
            du poids fort.
    - Le bit 1 indique une recherche à une date spécifique (incluse).
    - Le bit 2 indique une recherche avant une certaine date (exclue).
    - Le bit 3 indique une recherche après une certaine date (exclue).
  results : (int) le nombre de résultats attendus.
  offset : (int) nombre des premiers résultats à sauter.
  
  exemple de trame pour le client qui recherche le codex "MonCodex": 
  +---------------------------------------------------------------------+
  | (search) | MonCodex   | 2       | 1646232387     | 0       | 5      |
  +---------------------------------------------------------------------+
  
  Le serveur répond avec les informations suivantes :

  +-------------------------------------------------+
  | (search_response) | number_of_results | results |
  +-------------------------------------------------+

  number_of_results : (int) le nombre total de résultats.
  results : une liste comprenant :
    - filename : (string) le nom du fichier.
    - codex_id : (20 bytes) le hash du codex.
    - creation_date : (long) la date de création.
    - sharers : (int) le nombre de clients qui possèdent 
      les fichiers d'un codex à 100%


7. Téléchargement des fichiers du codex
7.1 Demande de téléchargement

  Lorsque le client souhaite télécharger un codex, il peut spécifier 
  s'il souhaite télécharger en mode ouvert ou en mode fermé, en 
  fonction de ses besoins de confidentialité et de partage.

  Le client envoie une trame de demande de téléchargement au serveur 
  avec les informations suivantes :

  +-------------------------------------------------------------------------------------+
  | (request_download) | codex_id | mode (byte) | number_of_sharers | number_of_proxies |
  +-------------------------------------------------------------------------------------+

  - codex_id : Le hachage (SHA1) du codex à télécharger.
  - mode : Un byte indiquant le mode de téléchargement :
    - 0 pour le mode ouvert.
    - 1 pour le mode fermé.
  - number_of_sharers : Le nombre maximum de sharers qui seront
                        contactés pour le téléchargement (int).
  - number_of_proxies : Le nombre de proxies qui seront utilisés par
                        chaîne (int). La valeur doit être à 0 si le mode
                        est ouvert.
  Exemple : Si le client souhaite télécharger le codex "MonCodex" en mode caché
    avec 5 sharers et 2 proxies par chaîne, la trame sera la suivante :

    Client <-> Proxy1 <-> Proxy2 <-> Sharer1
      ^
      |
      --> Proxy3 <-> Proxy4 <-> Sharer2

    +--------------------------------------------------------------------------+
    | (request_download) | 3a2b1c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0 | 1 | 5 | 2 |
    +--------------------------------------------------------------------------+

  Le serveur répond ensuite avec une trame contenant les informations 
  nécessaires pour effectuer le téléchargement :

  +------------------------------------------------------------+
  | (request_open_download_response) | sharers_count | sockets |
  +------------------------------------------------------------+

  - sharers_count : Le nombre de sharers actifs disponibles pour le 
                    téléchargement (int).
  - sockets : Une liste de sockets (définie dans la section "Encodage") 
              permettant d'établir la connexion avec chaque sharer 
              actif.

  Si le téléchargement est en mode fermé, le serveur revoie cette 
  trame:

  +--------------------------------------------------------------------------------------------------+
  | (request_closed_download_response) | proxies_count | socket | chain_id | socket | chain_id | ... |
  +--------------------------------------------------------------------------------------------------+

  - proxies_count: Le nombre de clients disponibles pour agir en tant 
                   que proxy (int).
  - Une liste de socket/chain_id:
    - socket : Le socket (défini dans la section "Encodage") du premier 
               maillon de la chaîne de proxies.
    - chain_id: L'identifiant associé au téléchargement et au 
                chaînage (pour le routage).
               
  En cas d'erreur, le serveur répond avec la trame suivante : 

  +----------------------------------+
  | (error) | error_message (string) |
  +----------------------------------+

  - error_message : message human-readable.
  Le client pourra alors renvoyer une annonce

7.2 Mise à jour des informations

  Une fois qu'un client a terminé le téléchargement d'un codex, il 
  informe le serveur de cette mise à jour. Cette action permet au 
  serveur de maintenir à jour les données concernant l'état des 
  téléchargements ainsi que les associations entre les clients et les 
  codex qu'ils possèdent.

  Le client envoie une trame de mise à jour au serveur pour indiquer la fin du téléchargement du codex spécifié.

  +---------------------+
  | (update) | codex_id | 
  +---------------------+

  - codex_id : Le hachage (SHA1) du codex qui a été téléchargé.


8.2 Mode ouvert

  A ce stade le client possède un codex et donc 
  connaît la liste des fichiers qu'il contient.
  Il connaît également les sharers qu'il doit contacter pour récupérer 
  les chunks.

  Le client initie l'échange avec un sharer avec le handshake:

  +-------------------------+
  | (handshake) | codex_id  | 
  +-------------------------+

  Si le client reçoit un handshake avec un codex_id qu'il ne possède 
  pas où qu'il ne souhaite pas partager il peut la refuse avec :

  +---------------------+
  | (denied) | codex_id |
  +---------------------+
  puis ferme la connexion.

  Autrement la connexion reste ouverte.


  8.2.1 Demande de chunk 
  
  Le chunk est une portion d'octet du fichier.
  Le client souhaite télécharger un chunk au sharer.

  +-------------------------------+
  | (needchunk) | offset | length |
  +-------------------------------+
                                                               
  offset:      l'indice du byte dans le chunk (long).
  length:      la taille du chunk (int).

  Le codex contenant plusieurs fichiers, 
  pour savoir de quels fichiers il faut récupérer les données,
  on doit considérer qu'il n'existe qu'un seul fichier dont le contenu 
  est la concaténation des octets de chaque fichiers.

  Ex:
  0          10          20
  [fichier 1 | fichier 2 | ...]
  
  Le client peut demander le chunk d'offset 5 et de taille 5 (la seconde
  moitié du fichier 1). Ou bien le chunk <10><15> du fichier 2

  Pour simplification dans la réception et l'envoie on considérera toute 
  demande de chunk qui chevauche deux fichiers comme erronée.


  8.2.2 Annulation
  Le client peut envoyer une trame pour annuler la requête 
  (needchunk) d'un block. La trame est identique à celle envoyée
  pour la requête mais l'opcode est remplacé par (cancel).

  8.2.3 Envoie du block
  
  Le sharer répond à une requête de chunk:

  +-----------------------------------------+
  | (herechunk) | offset | length | payload |
  +-----------------------------------------+

  offset:      l'indice du byte dans le chunk (int).
  payload:     la donnée

8.3 Mode fermé

  À ce stade, le client a envoyé une demande au serveur pour télécharger
  un codex en mode fermé. Si le nombre de clients est insuffisant pour 
  garantir le téléchargement du codex (seulement 2 client sont présent
  sur le serveur), le serveur agira comme un proxy pour le client, 


8.3.1  Création du routage des proxys

  Les clients maintiennent :
  - une table associative, appelée table de routage, associant à des chain_id une paire contenant un socket d'écoute

  Le serveur doit garantir les propriétés suivantes :
  - un même chain_id ne peut pas apparaître deux fois comme clé de table de routage ou dans un ensembles de tokens terminaux de client

  Initialement, cette table et cet ensemble sont vides. Le serveur va indiquer aux clients comment remplir leur table :

  +-----------------------------+
  | (proxy) | chain_id | socket |
  +-----------------------------+

  chain_id : identifiant unique de la chaîne de proxy (long) 
             généré aléatoirement par le serveur.
  socket : socket de destination du prochain maillon de la chaîne de proxy.
  
  Quand le client reçoit cette commande, il associe le socket (ip_dest:port_dest) au chain_id dans la table de routage. 
  Le client répond ok
  +-----------------------+
  | (proxy_ok) | chain_id |
  +-----------------------+


 le serveur doit trouver un autre proxy pour cette table de routage.


  8.3.2 Connexion

  Après avoir reçu une liste de proxy par le serveur après 
  son l'annonce, le client se connecte à un des proxys (premier maillon
  du chaînage).

  +-----------------------------------+
  | (proxyopen) | chain_id | codex_id |
  +-----------------------------------+

  chain_id : identifiant unique de la chaîne de proxy (long) 
             généré aléatoirement par le serveur.
  codex_id : hachage (SHA1) du codex.

  Si le chain_id est inconnu, la connexion est fermée.
  Le proxy transmet la trame au prochain maillon (proxy ou sharer).
  Le reste de la communication est indentique au mode ouvert, mais 
  chaque trame contient au début un en-tête:

  +---------------------------------------------+
  | (hidden) | chain_id  | int size   | payload |
  +---------------------------------------------+

  Et le client doit précéder toutes ses réponses par le même en-tête.

  Dès qu'un proxy, le client ou le sharer se déconnecte, une déconnexion 
  en chaîne est initiée.  
 

9. Deconnexion
  Lorsqu'un client se déconnecte du serveur, que ce soit de manière 
  inattendue ou volontaire, le protocole TCP permet au serveur de 
  détecter automatiquement cette déconnexion. Le serveur réagit à cette 
  déconnexion en libérant les ressources associées à cet utilisateur et 
  en informant tous les autres utilisateurs de sa déconnexion, 
  conformément aux spécifications de la partie "Discussion - Mise à jour 
  des présences".